// Code generated by MockGen. DO NOT EDIT.
// Source: ./addresses.go
//
// Generated by this command:
//
//	mockgen -source=./addresses.go -destination=./mocks/addresses.go -package=mock_repos AddressesRepo
//

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	context "context"
	reflect "reflect"

	repos "github.com/happilymarrieddad/order-management-v3/api/internal/repos"
	types "github.com/happilymarrieddad/order-management-v3/api/types"
	gomock "go.uber.org/mock/gomock"
	maps "googlemaps.github.io/maps"
	xorm "xorm.io/xorm"
)

// MockGoogleAPIClient is a mock of GoogleAPIClient interface.
type MockGoogleAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleAPIClientMockRecorder
	isgomock struct{}
}

// MockGoogleAPIClientMockRecorder is the mock recorder for MockGoogleAPIClient.
type MockGoogleAPIClientMockRecorder struct {
	mock *MockGoogleAPIClient
}

// NewMockGoogleAPIClient creates a new mock instance.
func NewMockGoogleAPIClient(ctrl *gomock.Controller) *MockGoogleAPIClient {
	mock := &MockGoogleAPIClient{ctrl: ctrl}
	mock.recorder = &MockGoogleAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleAPIClient) EXPECT() *MockGoogleAPIClientMockRecorder {
	return m.recorder
}

// Geocode mocks base method.
func (m *MockGoogleAPIClient) Geocode(ctx context.Context, r *maps.GeocodingRequest) ([]maps.GeocodingResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Geocode", ctx, r)
	ret0, _ := ret[0].([]maps.GeocodingResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Geocode indicates an expected call of Geocode.
func (mr *MockGoogleAPIClientMockRecorder) Geocode(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Geocode", reflect.TypeOf((*MockGoogleAPIClient)(nil).Geocode), ctx, r)
}

// MockAddressesRepo is a mock of AddressesRepo interface.
type MockAddressesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAddressesRepoMockRecorder
	isgomock struct{}
}

// MockAddressesRepoMockRecorder is the mock recorder for MockAddressesRepo.
type MockAddressesRepoMockRecorder struct {
	mock *MockAddressesRepo
}

// NewMockAddressesRepo creates a new mock instance.
func NewMockAddressesRepo(ctrl *gomock.Controller) *MockAddressesRepo {
	mock := &MockAddressesRepo{ctrl: ctrl}
	mock.recorder = &MockAddressesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressesRepo) EXPECT() *MockAddressesRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAddressesRepo) Create(ctx context.Context, address *types.Address) (*types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, address)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAddressesRepoMockRecorder) Create(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAddressesRepo)(nil).Create), ctx, address)
}

// CreateTx mocks base method.
func (m *MockAddressesRepo) CreateTx(ctx context.Context, tx *xorm.Session, address *types.Address) (*types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx, tx, address)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockAddressesRepoMockRecorder) CreateTx(ctx, tx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockAddressesRepo)(nil).CreateTx), ctx, tx, address)
}

// Delete mocks base method.
func (m *MockAddressesRepo) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAddressesRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAddressesRepo)(nil).Delete), ctx, id)
}

// DeleteTx mocks base method.
func (m *MockAddressesRepo) DeleteTx(ctx context.Context, tx *xorm.Session, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTx", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTx indicates an expected call of DeleteTx.
func (mr *MockAddressesRepoMockRecorder) DeleteTx(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTx", reflect.TypeOf((*MockAddressesRepo)(nil).DeleteTx), ctx, tx, id)
}

// Find mocks base method.
func (m *MockAddressesRepo) Find(ctx context.Context, opts *repos.AddressFindOpts) ([]*types.Address, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, opts)
	ret0, _ := ret[0].([]*types.Address)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Find indicates an expected call of Find.
func (mr *MockAddressesRepoMockRecorder) Find(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAddressesRepo)(nil).Find), ctx, opts)
}

// GeocodeAddress mocks base method.
func (m *MockAddressesRepo) GeocodeAddress(ctx context.Context, addr *types.Address) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeocodeAddress", ctx, addr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeocodeAddress indicates an expected call of GeocodeAddress.
func (mr *MockAddressesRepoMockRecorder) GeocodeAddress(ctx, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeocodeAddress", reflect.TypeOf((*MockAddressesRepo)(nil).GeocodeAddress), ctx, addr)
}

// Get mocks base method.
func (m *MockAddressesRepo) Get(ctx context.Context, id int64) (*types.Address, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockAddressesRepoMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAddressesRepo)(nil).Get), ctx, id)
}

// Update mocks base method.
func (m *MockAddressesRepo) Update(ctx context.Context, address *types.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAddressesRepoMockRecorder) Update(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAddressesRepo)(nil).Update), ctx, address)
}

// UpdateTx mocks base method.
func (m *MockAddressesRepo) UpdateTx(ctx context.Context, tx *xorm.Session, address *types.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTx", ctx, tx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTx indicates an expected call of UpdateTx.
func (mr *MockAddressesRepoMockRecorder) UpdateTx(ctx, tx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTx", reflect.TypeOf((*MockAddressesRepo)(nil).UpdateTx), ctx, tx, address)
}
