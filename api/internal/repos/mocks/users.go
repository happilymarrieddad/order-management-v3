// Code generated by MockGen. DO NOT EDIT.
// Source: ./users.go
//
// Generated by this command:
//
//	mockgen -source=./users.go -destination=./mocks/users.go -package=mock_repos UsersRepo
//

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	context "context"
	reflect "reflect"

	repos "github.com/happilymarrieddad/order-management-v3/api/internal/repos"
	types "github.com/happilymarrieddad/order-management-v3/api/types"
	gomock "go.uber.org/mock/gomock"
	xorm "xorm.io/xorm"
)

// MockUsersRepo is a mock of UsersRepo interface.
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
	isgomock struct{}
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo.
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance.
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsersRepo) Create(ctx context.Context, user *types.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsersRepoMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersRepo)(nil).Create), ctx, user)
}

// CreateTx mocks base method.
func (m *MockUsersRepo) CreateTx(ctx context.Context, tx *xorm.Session, user *types.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx, tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockUsersRepoMockRecorder) CreateTx(ctx, tx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockUsersRepo)(nil).CreateTx), ctx, tx, user)
}

// Delete mocks base method.
func (m *MockUsersRepo) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUsersRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsersRepo)(nil).Delete), ctx, id)
}

// DeleteTx mocks base method.
func (m *MockUsersRepo) DeleteTx(ctx context.Context, tx *xorm.Session, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTx", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTx indicates an expected call of DeleteTx.
func (mr *MockUsersRepoMockRecorder) DeleteTx(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTx", reflect.TypeOf((*MockUsersRepo)(nil).DeleteTx), ctx, tx, id)
}

// Find mocks base method.
func (m *MockUsersRepo) Find(ctx context.Context, opts *repos.UserFindOpts) ([]*types.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, opts)
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Find indicates an expected call of Find.
func (mr *MockUsersRepoMockRecorder) Find(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUsersRepo)(nil).Find), ctx, opts)
}

// Get mocks base method.
func (m *MockUsersRepo) Get(ctx context.Context, companyID, id int64) (*types.User, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, companyID, id)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockUsersRepoMockRecorder) Get(ctx, companyID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsersRepo)(nil).Get), ctx, companyID, id)
}

// GetByEmail mocks base method.
func (m *MockUsersRepo) GetByEmail(ctx context.Context, email string) (*types.User, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUsersRepoMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUsersRepo)(nil).GetByEmail), ctx, email)
}

// GetIncludeInvisible mocks base method.
func (m *MockUsersRepo) GetIncludeInvisible(ctx context.Context, id int64) (*types.User, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncludeInvisible", ctx, id)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIncludeInvisible indicates an expected call of GetIncludeInvisible.
func (mr *MockUsersRepoMockRecorder) GetIncludeInvisible(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncludeInvisible", reflect.TypeOf((*MockUsersRepo)(nil).GetIncludeInvisible), ctx, id)
}

// Update mocks base method.
func (m *MockUsersRepo) Update(ctx context.Context, user *types.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUsersRepoMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersRepo)(nil).Update), ctx, user)
}

// UpdatePassword mocks base method.
func (m *MockUsersRepo) UpdatePassword(ctx context.Context, userID int64, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, userID, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUsersRepoMockRecorder) UpdatePassword(ctx, userID, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUsersRepo)(nil).UpdatePassword), ctx, userID, newPassword)
}

// UpdatePasswordTx mocks base method.
func (m *MockUsersRepo) UpdatePasswordTx(ctx context.Context, tx *xorm.Session, userID int64, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordTx", ctx, tx, userID, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordTx indicates an expected call of UpdatePasswordTx.
func (mr *MockUsersRepoMockRecorder) UpdatePasswordTx(ctx, tx, userID, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordTx", reflect.TypeOf((*MockUsersRepo)(nil).UpdatePasswordTx), ctx, tx, userID, newPassword)
}

// UpdateTx mocks base method.
func (m *MockUsersRepo) UpdateTx(ctx context.Context, tx *xorm.Session, user *types.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTx", ctx, tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTx indicates an expected call of UpdateTx.
func (mr *MockUsersRepoMockRecorder) UpdateTx(ctx, tx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTx", reflect.TypeOf((*MockUsersRepo)(nil).UpdateTx), ctx, tx, user)
}

// UpdateUserCompany mocks base method.
func (m *MockUsersRepo) UpdateUserCompany(ctx context.Context, userID, companyID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCompany", ctx, userID, companyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCompany indicates an expected call of UpdateUserCompany.
func (mr *MockUsersRepoMockRecorder) UpdateUserCompany(ctx, userID, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCompany", reflect.TypeOf((*MockUsersRepo)(nil).UpdateUserCompany), ctx, userID, companyID)
}

// UpdateUserCompanyTx mocks base method.
func (m *MockUsersRepo) UpdateUserCompanyTx(ctx context.Context, tx *xorm.Session, userID, companyID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCompanyTx", ctx, tx, userID, companyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCompanyTx indicates an expected call of UpdateUserCompanyTx.
func (mr *MockUsersRepoMockRecorder) UpdateUserCompanyTx(ctx, tx, userID, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCompanyTx", reflect.TypeOf((*MockUsersRepo)(nil).UpdateUserCompanyTx), ctx, tx, userID, companyID)
}
