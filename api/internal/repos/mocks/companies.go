// Code generated by MockGen. DO NOT EDIT.
// Source: ./companies.go
//
// Generated by this command:
//
//	mockgen -source=./companies.go -destination=./mocks/companies.go -package=mock_repos CompaniesRepo
//

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	context "context"
	reflect "reflect"

	repos "github.com/happilymarrieddad/order-management-v3/api/internal/repos"
	types "github.com/happilymarrieddad/order-management-v3/api/types"
	gomock "go.uber.org/mock/gomock"
	xorm "xorm.io/xorm"
)

// MockCompaniesRepo is a mock of CompaniesRepo interface.
type MockCompaniesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCompaniesRepoMockRecorder
	isgomock struct{}
}

// MockCompaniesRepoMockRecorder is the mock recorder for MockCompaniesRepo.
type MockCompaniesRepoMockRecorder struct {
	mock *MockCompaniesRepo
}

// NewMockCompaniesRepo creates a new mock instance.
func NewMockCompaniesRepo(ctrl *gomock.Controller) *MockCompaniesRepo {
	mock := &MockCompaniesRepo{ctrl: ctrl}
	mock.recorder = &MockCompaniesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompaniesRepo) EXPECT() *MockCompaniesRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCompaniesRepo) Create(ctx context.Context, company *types.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCompaniesRepoMockRecorder) Create(ctx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCompaniesRepo)(nil).Create), ctx, company)
}

// CreateTx mocks base method.
func (m *MockCompaniesRepo) CreateTx(ctx context.Context, tx *xorm.Session, company *types.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx, tx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockCompaniesRepoMockRecorder) CreateTx(ctx, tx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockCompaniesRepo)(nil).CreateTx), ctx, tx, company)
}

// Delete mocks base method.
func (m *MockCompaniesRepo) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCompaniesRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCompaniesRepo)(nil).Delete), ctx, id)
}

// DeleteTx mocks base method.
func (m *MockCompaniesRepo) DeleteTx(ctx context.Context, tx *xorm.Session, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTx", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTx indicates an expected call of DeleteTx.
func (mr *MockCompaniesRepoMockRecorder) DeleteTx(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTx", reflect.TypeOf((*MockCompaniesRepo)(nil).DeleteTx), ctx, tx, id)
}

// Find mocks base method.
func (m *MockCompaniesRepo) Find(ctx context.Context, opts *repos.CompanyFindOpts) ([]*types.Company, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, opts)
	ret0, _ := ret[0].([]*types.Company)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Find indicates an expected call of Find.
func (mr *MockCompaniesRepoMockRecorder) Find(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCompaniesRepo)(nil).Find), ctx, opts)
}

// Get mocks base method.
func (m *MockCompaniesRepo) Get(ctx context.Context, id int64) (*types.Company, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*types.Company)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockCompaniesRepoMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCompaniesRepo)(nil).Get), ctx, id)
}

// Update mocks base method.
func (m *MockCompaniesRepo) Update(ctx context.Context, company *types.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCompaniesRepoMockRecorder) Update(ctx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCompaniesRepo)(nil).Update), ctx, company)
}

// UpdateTx mocks base method.
func (m *MockCompaniesRepo) UpdateTx(ctx context.Context, tx *xorm.Session, company *types.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTx", ctx, tx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTx indicates an expected call of UpdateTx.
func (mr *MockCompaniesRepoMockRecorder) UpdateTx(ctx, tx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTx", reflect.TypeOf((*MockCompaniesRepo)(nil).UpdateTx), ctx, tx, company)
}
