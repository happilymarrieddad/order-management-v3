// Code generated by MockGen. DO NOT EDIT.
// Source: ./global_repo.go
//
// Generated by this command:
//
//	mockgen -source=./global_repo.go -destination=./mocks/global_repo.go -package=mock_repos GlobalRepo
//

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	reflect "reflect"

	repos "github.com/happilymarrieddad/order-management-v3/api/internal/repos"
	gomock "go.uber.org/mock/gomock"
)

// MockGlobalRepo is a mock of GlobalRepo interface.
type MockGlobalRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalRepoMockRecorder
	isgomock struct{}
}

// MockGlobalRepoMockRecorder is the mock recorder for MockGlobalRepo.
type MockGlobalRepoMockRecorder struct {
	mock *MockGlobalRepo
}

// NewMockGlobalRepo creates a new mock instance.
func NewMockGlobalRepo(ctrl *gomock.Controller) *MockGlobalRepo {
	mock := &MockGlobalRepo{ctrl: ctrl}
	mock.recorder = &MockGlobalRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalRepo) EXPECT() *MockGlobalRepoMockRecorder {
	return m.recorder
}

// Addresses mocks base method.
func (m *MockGlobalRepo) Addresses() repos.AddressesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addresses")
	ret0, _ := ret[0].(repos.AddressesRepo)
	return ret0
}

// Addresses indicates an expected call of Addresses.
func (mr *MockGlobalRepoMockRecorder) Addresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addresses", reflect.TypeOf((*MockGlobalRepo)(nil).Addresses))
}

// Commodities mocks base method.
func (m *MockGlobalRepo) Commodities() repos.CommoditiesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commodities")
	ret0, _ := ret[0].(repos.CommoditiesRepo)
	return ret0
}

// Commodities indicates an expected call of Commodities.
func (mr *MockGlobalRepoMockRecorder) Commodities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commodities", reflect.TypeOf((*MockGlobalRepo)(nil).Commodities))
}

// CommodityAttributes mocks base method.
func (m *MockGlobalRepo) CommodityAttributes() repos.CommodityAttributesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommodityAttributes")
	ret0, _ := ret[0].(repos.CommodityAttributesRepo)
	return ret0
}

// CommodityAttributes indicates an expected call of CommodityAttributes.
func (mr *MockGlobalRepoMockRecorder) CommodityAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommodityAttributes", reflect.TypeOf((*MockGlobalRepo)(nil).CommodityAttributes))
}

// Companies mocks base method.
func (m *MockGlobalRepo) Companies() repos.CompaniesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Companies")
	ret0, _ := ret[0].(repos.CompaniesRepo)
	return ret0
}

// Companies indicates an expected call of Companies.
func (mr *MockGlobalRepoMockRecorder) Companies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Companies", reflect.TypeOf((*MockGlobalRepo)(nil).Companies))
}

// CompanyAttributes mocks base method.
func (m *MockGlobalRepo) CompanyAttributes() repos.CompanyAttributesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyAttributes")
	ret0, _ := ret[0].(repos.CompanyAttributesRepo)
	return ret0
}

// CompanyAttributes indicates an expected call of CompanyAttributes.
func (mr *MockGlobalRepoMockRecorder) CompanyAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyAttributes", reflect.TypeOf((*MockGlobalRepo)(nil).CompanyAttributes))
}

// Locations mocks base method.
func (m *MockGlobalRepo) Locations() repos.LocationsRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locations")
	ret0, _ := ret[0].(repos.LocationsRepo)
	return ret0
}

// Locations indicates an expected call of Locations.
func (mr *MockGlobalRepoMockRecorder) Locations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locations", reflect.TypeOf((*MockGlobalRepo)(nil).Locations))
}

// Users mocks base method.
func (m *MockGlobalRepo) Users() repos.UsersRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(repos.UsersRepo)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockGlobalRepoMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockGlobalRepo)(nil).Users))
}
