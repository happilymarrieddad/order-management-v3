// Code generated by MockGen. DO NOT EDIT.
// Source: ./locations.go
//
// Generated by this command:
//
//	mockgen -source=./locations.go -destination=./mocks/locations.go -package=mock_repos LocationsRepo
//

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	context "context"
	reflect "reflect"

	repos "github.com/happilymarrieddad/order-management-v3/api/internal/repos"
	types "github.com/happilymarrieddad/order-management-v3/api/types"
	gomock "go.uber.org/mock/gomock"
	xorm "xorm.io/xorm"
)

// MockLocationsRepo is a mock of LocationsRepo interface.
type MockLocationsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLocationsRepoMockRecorder
	isgomock struct{}
}

// MockLocationsRepoMockRecorder is the mock recorder for MockLocationsRepo.
type MockLocationsRepoMockRecorder struct {
	mock *MockLocationsRepo
}

// NewMockLocationsRepo creates a new mock instance.
func NewMockLocationsRepo(ctrl *gomock.Controller) *MockLocationsRepo {
	mock := &MockLocationsRepo{ctrl: ctrl}
	mock.recorder = &MockLocationsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationsRepo) EXPECT() *MockLocationsRepoMockRecorder {
	return m.recorder
}

// CountByCompanyID mocks base method.
func (m *MockLocationsRepo) CountByCompanyID(ctx context.Context, companyID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByCompanyID", ctx, companyID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByCompanyID indicates an expected call of CountByCompanyID.
func (mr *MockLocationsRepoMockRecorder) CountByCompanyID(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByCompanyID", reflect.TypeOf((*MockLocationsRepo)(nil).CountByCompanyID), ctx, companyID)
}

// Create mocks base method.
func (m *MockLocationsRepo) Create(ctx context.Context, location *types.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLocationsRepoMockRecorder) Create(ctx, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLocationsRepo)(nil).Create), ctx, location)
}

// CreateTx mocks base method.
func (m *MockLocationsRepo) CreateTx(ctx context.Context, tx *xorm.Session, location *types.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx, tx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockLocationsRepoMockRecorder) CreateTx(ctx, tx, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockLocationsRepo)(nil).CreateTx), ctx, tx, location)
}

// Delete mocks base method.
func (m *MockLocationsRepo) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLocationsRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLocationsRepo)(nil).Delete), ctx, id)
}

// DeleteTx mocks base method.
func (m *MockLocationsRepo) DeleteTx(ctx context.Context, tx *xorm.Session, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTx", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTx indicates an expected call of DeleteTx.
func (mr *MockLocationsRepoMockRecorder) DeleteTx(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTx", reflect.TypeOf((*MockLocationsRepo)(nil).DeleteTx), ctx, tx, id)
}

// Find mocks base method.
func (m *MockLocationsRepo) Find(ctx context.Context, opts *repos.LocationFindOpts) ([]*types.Location, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, opts)
	ret0, _ := ret[0].([]*types.Location)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Find indicates an expected call of Find.
func (mr *MockLocationsRepoMockRecorder) Find(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockLocationsRepo)(nil).Find), ctx, opts)
}

// Get mocks base method.
func (m *MockLocationsRepo) Get(ctx context.Context, companyID, id int64) (*types.Location, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, companyID, id)
	ret0, _ := ret[0].(*types.Location)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockLocationsRepoMockRecorder) Get(ctx, companyID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLocationsRepo)(nil).Get), ctx, companyID, id)
}

// GetIncludeInvisible mocks base method.
func (m *MockLocationsRepo) GetIncludeInvisible(ctx context.Context, id int64) (*types.Location, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncludeInvisible", ctx, id)
	ret0, _ := ret[0].(*types.Location)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIncludeInvisible indicates an expected call of GetIncludeInvisible.
func (mr *MockLocationsRepoMockRecorder) GetIncludeInvisible(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncludeInvisible", reflect.TypeOf((*MockLocationsRepo)(nil).GetIncludeInvisible), ctx, id)
}

// Update mocks base method.
func (m *MockLocationsRepo) Update(ctx context.Context, location *types.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLocationsRepoMockRecorder) Update(ctx, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLocationsRepo)(nil).Update), ctx, location)
}

// UpdateTx mocks base method.
func (m *MockLocationsRepo) UpdateTx(ctx context.Context, tx *xorm.Session, location *types.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTx", ctx, tx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTx indicates an expected call of UpdateTx.
func (mr *MockLocationsRepoMockRecorder) UpdateTx(ctx, tx, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTx", reflect.TypeOf((*MockLocationsRepo)(nil).UpdateTx), ctx, tx, location)
}
