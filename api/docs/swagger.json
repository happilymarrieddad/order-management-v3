{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/addresses": {
            "post": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Creates a new address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "addresses"
                ],
                "summary": "Create a new address",
                "parameters": [
                    {
                        "description": "Address Creation Payload",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addresses.CreateAddressPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created address",
                        "schema": {
                            "$ref": "#/definitions/types.Address"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or validation failed",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/addresses/find": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Finds addresses with optional filters and pagination using query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "addresses"
                ],
                "summary": "Find addresses",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "Address IDs",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of addresses",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/types.Address"
                                    }
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/addresses/{id}": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Gets an address by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "addresses"
                ],
                "summary": "Get an address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Address"
                        }
                    },
                    "400": {
                        "description": "Invalid Address ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Address not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing address with new details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "addresses"
                ],
                "summary": "Update an address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address Update Payload",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addresses.UpdateAddressPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated address",
                        "schema": {
                            "$ref": "#/definitions/types.Address"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Address not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully authenticated",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/commodities": {
            "post": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Creates a new commodity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodities"
                ],
                "summary": "Create a new commodity",
                "parameters": [
                    {
                        "description": "Commodity Creation Payload",
                        "name": "commodity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commodities.CreateCommodityPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created commodity",
                        "schema": {
                            "$ref": "#/definitions/types.Commodity"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or validation failed",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/commodities/find": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Finds commodities with optional filters and pagination using query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodities"
                ],
                "summary": "Find commodities",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "Commodity IDs",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Commodity names",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Commodity type",
                        "name": "commodity_type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of commodities",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/types.Commodity"
                                    }
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/commodities/{id}": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Retrieves the details of a single commodity.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodities"
                ],
                "summary": "Get a commodity by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Commodity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved commodity",
                        "schema": {
                            "$ref": "#/definitions/types.Commodity"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Commodity not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Updates an existing commodity by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodities"
                ],
                "summary": "Update a commodity",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Commodity ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Commodity Update Payload",
                        "name": "commodity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commodities.UpdateCommodityPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated commodity",
                        "schema": {
                            "$ref": "#/definitions/types.Commodity"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or validation failed",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Commodity not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/commodity-attributes": {
            "post": {
                "description": "Creates a new commodity attribute with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodity-attributes"
                ],
                "summary": "Create a new commodity attribute",
                "parameters": [
                    {
                        "description": "Commodity Attribute Creation Payload",
                        "name": "attribute",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commodityattributes.CreateCommodityAttributePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created commodity attribute",
                        "schema": {
                            "$ref": "#/definitions/types.CommodityAttribute"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - Duplicate attribute name",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/commodity-attributes/find": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Finds commodity attributes with optional filters and pagination by sending query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodity-attributes"
                ],
                "summary": "Find commodity attributes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of records to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of records to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by Commodity Attribute IDs",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by Commodity Types (e.g., 'grain', 'fruit')",
                        "name": "commodity_types",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of commodity attributes",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/types.CommodityAttribute"
                                    }
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/commodity-attributes/{id}": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Gets a commodity attribute by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodity-attributes"
                ],
                "summary": "Get a commodity attribute",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Commodity Attribute ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.CommodityAttribute"
                        }
                    },
                    "400": {
                        "description": "Invalid Commodity Attribute ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Commodity Attribute not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing commodity attribute with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "commodity-attributes"
                ],
                "summary": "Update a commodity attribute",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Commodity Attribute ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Commodity Attribute Update Payload",
                        "name": "attribute",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commodityattributes.UpdateCommodityAttributePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated commodity attribute",
                        "schema": {
                            "$ref": "#/definitions/types.CommodityAttribute"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Commodity attribute not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - Duplicate attribute name",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/commodity-types": {
            "get": {
                "description": "Retrieves a list of all available commodity types.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Get all commodity types",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved commodity types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/companies/find": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Finds companies with optional filters and pagination using query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Find companies",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "Company IDs",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Company names",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of companies",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/types.Company"
                                    }
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/companies/{id}": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Gets a company by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Get a company",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid Company ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Company not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Updates an existing company's details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Update a company",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Company Update Payload",
                        "name": "company",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/companies.UpdateCompanyPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated company",
                        "schema": {
                            "$ref": "#/definitions/types.Company"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Company not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Deletes a company by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Delete a company",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid Company ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Company not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/locations": {
            "post": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Creates a new location for a company.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Create a new location",
                "parameters": [
                    {
                        "description": "Location Creation Payload",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/locations.CreateLocationPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created location",
                        "schema": {
                            "$ref": "#/definitions/types.Location"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or validation failed",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/locations/find": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Finds locations with optional filters and pagination by sending query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Find locations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of records to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of records to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Location name filter",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of locations",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/types.Location"
                                    }
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/locations/{id}": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Gets a location by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Get a location",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Location"
                        }
                    },
                    "400": {
                        "description": "Invalid Location ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Location not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Updates an existing location's details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Update a location",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Location Update Payload",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/locations.UpdateLocationPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated location",
                        "schema": {
                            "$ref": "#/definitions/types.Location"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Location not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Deletes a location by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Delete a location",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid Location ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Location not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/order-statuses": {
            "get": {
                "description": "Retrieves a list of all available order statuses.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Get all order statuses",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved order statuses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "description": "Retrieves a list of all available user roles.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Get all roles",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved roles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/find": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Finds users with optional filters and pagination by sending query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Find users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of records to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of records to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by Company ID",
                        "name": "company_id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by User IDs",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by Emails",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by First Names",
                        "name": "first_name",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by Last Names",
                        "name": "last_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of users",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/types.User"
                                    }
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "description": "Deletes a user by their ID. A user can delete themselves, or an admin can delete any user within the same company.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid User ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/company": {
            "put": {
                "description": "Moves a user to a new company. This is an admin-only endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user's company (Admin only)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Company Payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UpdateUserCompanyPayload"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid request body or Company not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "addresses.CreateAddressPayload": {
            "type": "object",
            "required": [
                "city",
                "country",
                "line_1",
                "postal_code",
                "state"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "line_1": {
                    "type": "string"
                },
                "line_2": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "addresses.UpdateAddressPayload": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "line_1": {
                    "type": "string"
                },
                "line_2": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "auth.LoginPayload": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "auth.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "commodities.CreateCommodityPayload": {
            "type": "object",
            "required": [
                "commodity_type",
                "name"
            ],
            "properties": {
                "commodity_type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.CommodityType"
                        }
                    ],
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Apple"
                }
            }
        },
        "commodities.UpdateCommodityPayload": {
            "type": "object",
            "properties": {
                "commodity_type": {
                    "$ref": "#/definitions/types.CommodityType"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "commodityattributes.CreateCommodityAttributePayload": {
            "type": "object",
            "required": [
                "commodityType",
                "name"
            ],
            "properties": {
                "commodityType": {
                    "enum": [
                        1
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.CommodityType"
                        }
                    ]
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                }
            }
        },
        "commodityattributes.UpdateCommodityAttributePayload": {
            "type": "object",
            "properties": {
                "commodityType": {
                    "$ref": "#/definitions/types.CommodityType"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "companies.UpdateCompanyPayload": {
            "type": "object",
            "properties": {
                "address_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "locations.CreateLocationPayload": {
            "type": "object",
            "required": [
                "address_id",
                "company_id",
                "name"
            ],
            "properties": {
                "address_id": {
                    "type": "integer"
                },
                "company_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "locations.UpdateLocationPayload": {
            "type": "object",
            "properties": {
                "address_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "middleware.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "a description of the error"
                }
            }
        },
        "types.Address": {
            "type": "object",
            "required": [
                "city",
                "country",
                "line1",
                "postalCode",
                "state"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "globalCode": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "line1": {
                    "type": "string"
                },
                "line2": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "types.Commodity": {
            "type": "object",
            "properties": {
                "commodityType": {
                    "$ref": "#/definitions/types.CommodityType"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "visible": {
                    "type": "boolean"
                }
            }
        },
        "types.CommodityAttribute": {
            "type": "object",
            "properties": {
                "commodityType": {
                    "$ref": "#/definitions/types.CommodityType"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "description": "Assuming attribute names are unique",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "types.CommodityType": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "CommodityTypeUnknown",
                "CommodityTypeProduce"
            ]
        },
        "types.Company": {
            "type": "object",
            "required": [
                "address_id",
                "name"
            ],
            "properties": {
                "address": {
                    "description": "Relations",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Address"
                        }
                    ]
                },
                "address_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "default_order_number": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "order_postfix": {
                    "type": "string"
                },
                "order_prefix": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.Location": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/types.Address"
                },
                "addressId": {
                    "type": "integer"
                },
                "company": {
                    "description": "Relations (for API responses)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Company"
                        }
                    ]
                },
                "companyId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "types.Role": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "RoleUnknown",
                "RoleAdmin",
                "RoleUser"
            ]
        },
        "types.User": {
            "type": "object",
            "required": [
                "addressId",
                "companyId",
                "email",
                "firstName",
                "lastName"
            ],
            "properties": {
                "address": {
                    "description": "Relations",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Address"
                        }
                    ]
                },
                "addressId": {
                    "type": "integer"
                },
                "companyId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Role"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "users.UpdateUserCompanyPayload": {
            "type": "object",
            "required": [
                "company_id"
            ],
            "properties": {
                "company_id": {
                    "type": "integer"
                }
            }
        }
    }
}