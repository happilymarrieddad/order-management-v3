basePath: /api/v1
definitions:
  addresses.UpdateAddressPayload:
    properties:
      city:
        example: Newville
        type: string
      line_1:
        example: 456 Market St
        type: string
      line_2:
        example: Suite 200
        type: string
      postal_code:
        example: "54321"
        type: string
      state:
        example: NY
        type: string
    required:
    - city
    - line_1
    - postal_code
    - state
    type: object
  auth.LoginPayload:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  companies.CreateCompanyPayload:
    properties:
      address_id:
        example: 1
        type: integer
      name:
        example: Awesome Inc.
        type: string
    required:
    - address_id
    - name
    type: object
  companies.UpdateCompanyPayload:
    properties:
      address_id:
        example: 2
        type: integer
      name:
        example: Even Better Inc.
        type: string
    required:
    - address_id
    - name
    type: object
  locations.CreateLocationPayload:
    properties:
      address_id:
        example: 1
        type: integer
      company_id:
        example: 1
        type: integer
      name:
        example: Main Warehouse
        type: string
    required:
    - address_id
    - company_id
    - name
    type: object
  locations.UpdateLocationPayload:
    properties:
      address_id:
        example: 2
        type: integer
      name:
        example: Downtown Office
        type: string
    required:
    - address_id
    - name
    type: object
  middleware.ErrorResponse:
    properties:
      error:
        example: a description of the error
        type: string
    type: object
  types.Address:
    properties:
      city:
        type: string
      country:
        type: string
      createdAt:
        type: string
      globalCode:
        type: string
      id:
        type: integer
      line1:
        type: string
      line2:
        type: string
      postalCode:
        type: string
      state:
        type: string
      updatedAt:
        type: string
    required:
    - city
    - country
    - line1
    - postalCode
    - state
    type: object
  types.Company:
    properties:
      address:
        allOf:
        - $ref: '#/definitions/types.Address'
        description: Relations
      addressId:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    required:
    - addressId
    - name
    type: object
  types.FindResult:
    properties:
      data: {}
      total:
        type: integer
    type: object
  types.Location:
    properties:
      address:
        $ref: '#/definitions/types.Address'
      addressId:
        type: integer
      company:
        allOf:
        - $ref: '#/definitions/types.Company'
        description: Relations (for API responses)
      companyId:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  types.Role:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - RoleUnknown
    - RoleAdmin
    - RoleUser
  types.User:
    properties:
      addressId:
        type: integer
      companyId:
        type: integer
      createdAt:
        type: string
      email:
        type: string
      firstName:
        maxLength: 50
        minLength: 2
        type: string
      id:
        type: integer
      lastName:
        maxLength: 50
        minLength: 2
        type: string
      roles:
        items:
          $ref: '#/definitions/types.Role'
        type: array
      updatedAt:
        type: string
    required:
    - addressId
    - companyId
    - email
    - firstName
    - lastName
    type: object
  users.CreateUserPayload:
    properties:
      address_id:
        example: 1
        type: integer
      company_id:
        example: 1
        type: integer
      confirm_password:
        example: password123
        type: string
      email:
        example: test@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - address_id
    - company_id
    - confirm_password
    - email
    - first_name
    - last_name
    - password
    type: object
  users.UpdateUserPayload:
    properties:
      address_id:
        example: 2
        type: integer
      first_name:
        example: Jane
        type: string
      last_name:
        example: Doe
        type: string
    required:
    - address_id
    - first_name
    - last_name
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the API for the Order Management System.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Order Management API
  version: "1.0"
paths:
  /addresses/{id}:
    delete:
      description: Deletes an address by its ID.
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an address
      tags:
      - addresses
    get:
      description: Retrieves the details of a single address by its unique ID.
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved address
          schema:
            $ref: '#/definitions/types.Address'
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Address not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an address by ID
      tags:
      - addresses
    put:
      consumes:
      - application/json
      description: Updates an existing address with new details.
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      - description: Address Update Payload
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/addresses.UpdateAddressPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated address
          schema:
            $ref: '#/definitions/types.Address'
        "400":
          description: Bad Request - Invalid input or ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Address not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an address
      tags:
      - addresses
  /addresses/find:
    get:
      description: Finds addresses with optional filters and pagination.
      parameters:
      - description: Comma-separated list of address IDs
        in: query
        name: ids
        type: string
      - default: 10
        description: Pagination limit
        in: query
        name: limit
        type: integer
      - description: Pagination offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: A list of addresses
          schema:
            allOf:
            - $ref: '#/definitions/types.FindResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/types.Address'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Find addresses
      tags:
      - addresses
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token.
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: User Login
      tags:
      - auth
  /companies:
    post:
      consumes:
      - application/json
      description: Creates a new company with the provided details.
      parameters:
      - description: Company Creation Payload
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/companies.CreateCompanyPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created company
          schema:
            $ref: '#/definitions/types.Company'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create a new company
      tags:
      - companies
  /companies/{id}:
    delete:
      description: Deletes a company by its ID.
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a company
      tags:
      - companies
    get:
      description: Retrieves the details of a single company by its unique ID.
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved company
          schema:
            $ref: '#/definitions/types.Company'
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Company not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a company by ID
      tags:
      - companies
    put:
      consumes:
      - application/json
      description: Updates an existing company with new details.
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      - description: Company Update Payload
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/companies.UpdateCompanyPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated company
          schema:
            $ref: '#/definitions/types.Company'
        "400":
          description: Bad Request - Invalid input or ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Company not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a company
      tags:
      - companies
  /companies/find:
    get:
      description: Finds companies with optional filters and pagination.
      parameters:
      - description: Comma-separated list of company IDs
        in: query
        name: ids
        type: string
      - default: 10
        description: Pagination limit
        in: query
        name: limit
        type: integer
      - description: Pagination offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: A list of companies
          schema:
            allOf:
            - $ref: '#/definitions/types.FindResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/types.Company'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Find companies
      tags:
      - companies
  /locations:
    post:
      consumes:
      - application/json
      description: Creates a new location for a company. The location name must be
        unique per company.
      parameters:
      - description: Location Creation Payload
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/locations.CreateLocationPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created location
          schema:
            $ref: '#/definitions/types.Location'
        "400":
          description: Bad Request - Invalid input, duplicate name, or dependency
            not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Create a new location
      tags:
      - locations
  /locations/{id}:
    delete:
      description: Deletes a location by its ID.
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a location
      tags:
      - locations
    get:
      description: Retrieves the details of a single location, including its company
        and address.
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved location
          schema:
            $ref: '#/definitions/types.Location'
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Location not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Get a location by ID
      tags:
      - locations
    put:
      consumes:
      - application/json
      description: Updates an existing location's name and/or address.
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      - description: Location Update Payload
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/locations.UpdateLocationPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated location
          schema:
            $ref: '#/definitions/types.Location'
        "400":
          description: Bad Request - Invalid input or ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Location or new address not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Update a location
      tags:
      - locations
  /locations/find:
    get:
      description: Finds locations with optional filters and pagination.
      parameters:
      - description: Comma-separated list of location IDs
        in: query
        name: ids
        type: string
      - description: Comma-separated list of company IDs
        in: query
        name: company_ids
        type: string
      - description: Comma-separated list of address IDs
        in: query
        name: address_ids
        type: string
      - description: Comma-separated list of location names
        in: query
        name: names
        type: string
      - default: 10
        description: Pagination limit
        in: query
        name: limit
        type: integer
      - description: Pagination offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: A list of locations
          schema:
            allOf:
            - $ref: '#/definitions/types.FindResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/types.Location'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Find locations
      tags:
      - locations
  /users:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided details.
      parameters:
      - description: User Creation Payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.CreateUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request - Invalid input or user already exists
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Deletes a user by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      description: Retrieves the details of a single user by their unique ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates an existing user's details. This does not update the password.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Update Payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.UpdateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request - Invalid input or ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
  /users/find:
    get:
      description: Finds users with optional filters and pagination.
      parameters:
      - description: Comma-separated list of user IDs
        in: query
        name: ids
        type: string
      - description: Comma-separated list of user emails
        in: query
        name: emails
        type: string
      - default: 10
        description: Pagination limit
        in: query
        name: limit
        type: integer
      - description: Pagination offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: A list of users
          schema:
            allOf:
            - $ref: '#/definitions/types.FindResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/types.User'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Find users
      tags:
      - users
swagger: "2.0"
