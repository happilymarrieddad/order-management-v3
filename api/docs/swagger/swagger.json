{
    "swagger": "2.0",
    "info": {
        "description": "This is the API for the Order Management System.",
        "title": "Order Management API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/addresses/find": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Finds addresses with optional filters and pagination.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "addresses"
                ],
                "summary": "Find addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of address IDs",
                        "name": "ids",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Pagination limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of addresses",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.FindResult"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.Address"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/addresses/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of a single address by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "addresses"
                ],
                "summary": "Get an address by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved address",
                        "schema": {
                            "$ref": "#/definitions/types.Address"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Address not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing address with new details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "addresses"
                ],
                "summary": "Update an address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address Update Payload",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addresses.UpdateAddressPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated address",
                        "schema": {
                            "$ref": "#/definitions/types.Address"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Address not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an address by its ID.",
                "tags": [
                    "addresses"
                ],
                "summary": "Delete an address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully authenticated",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/companies": {
            "post": {
                "description": "Creates a new company with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Create a new company",
                "parameters": [
                    {
                        "description": "Company Creation Payload",
                        "name": "company",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/companies.CreateCompanyPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created company",
                        "schema": {
                            "$ref": "#/definitions/types.Company"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/companies/find": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Finds companies with optional filters and pagination.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Find companies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of company IDs",
                        "name": "ids",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Pagination limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of companies",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.FindResult"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.Company"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/companies/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of a single company by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Get a company by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved company",
                        "schema": {
                            "$ref": "#/definitions/types.Company"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Company not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing company with new details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Update a company",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Company Update Payload",
                        "name": "company",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/companies.UpdateCompanyPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated company",
                        "schema": {
                            "$ref": "#/definitions/types.Company"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Company not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a company by its ID.",
                "tags": [
                    "companies"
                ],
                "summary": "Delete a company",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/locations": {
            "post": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Creates a new location for a company. The location name must be unique per company.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Create a new location",
                "parameters": [
                    {
                        "description": "Location Creation Payload",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/locations.CreateLocationPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created location",
                        "schema": {
                            "$ref": "#/definitions/types.Location"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input, duplicate name, or dependency not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/locations/find": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Finds locations with optional filters and pagination.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Find locations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of location IDs",
                        "name": "ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of company IDs",
                        "name": "company_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of address IDs",
                        "name": "address_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of location names",
                        "name": "names",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Pagination limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of locations",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.FindResult"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.Location"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/locations/{id}": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Retrieves the details of a single location, including its company and address.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Get a location by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved location",
                        "schema": {
                            "$ref": "#/definitions/types.Location"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Location not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Updates an existing location's name and/or address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Update a location",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Location Update Payload",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/locations.UpdateLocationPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated location",
                        "schema": {
                            "$ref": "#/definitions/types.Location"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Location or new address not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a location by its ID.",
                "tags": [
                    "locations"
                ],
                "summary": "Delete a location",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Creates a new user account with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User Creation Payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.CreateUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or user already exists",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/find": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Finds users with optional filters and pagination.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Find users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of user IDs",
                        "name": "ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of user emails",
                        "name": "emails",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Pagination limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of users",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.FindResult"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/types.User"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "AppTokenAuth": []
                    }
                ],
                "description": "Retrieves the details of a single user by their unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing user's details. This does not update the password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User Update Payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UpdateUserPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a user by their ID.",
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "addresses.UpdateAddressPayload": {
            "type": "object",
            "required": [
                "city",
                "line_1",
                "postal_code",
                "state"
            ],
            "properties": {
                "city": {
                    "type": "string",
                    "example": "Newville"
                },
                "line_1": {
                    "type": "string",
                    "example": "456 Market St"
                },
                "line_2": {
                    "type": "string",
                    "example": "Suite 200"
                },
                "postal_code": {
                    "type": "string",
                    "example": "54321"
                },
                "state": {
                    "type": "string",
                    "example": "NY"
                }
            }
        },
        "auth.LoginPayload": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "auth.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "companies.CreateCompanyPayload": {
            "type": "object",
            "required": [
                "address_id",
                "name"
            ],
            "properties": {
                "address_id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Awesome Inc."
                }
            }
        },
        "companies.UpdateCompanyPayload": {
            "type": "object",
            "required": [
                "address_id",
                "name"
            ],
            "properties": {
                "address_id": {
                    "type": "integer",
                    "example": 2
                },
                "name": {
                    "type": "string",
                    "example": "Even Better Inc."
                }
            }
        },
        "locations.CreateLocationPayload": {
            "type": "object",
            "required": [
                "address_id",
                "company_id",
                "name"
            ],
            "properties": {
                "address_id": {
                    "type": "integer",
                    "example": 1
                },
                "company_id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Main Warehouse"
                }
            }
        },
        "locations.UpdateLocationPayload": {
            "type": "object",
            "required": [
                "address_id",
                "name"
            ],
            "properties": {
                "address_id": {
                    "type": "integer",
                    "example": 2
                },
                "name": {
                    "type": "string",
                    "example": "Downtown Office"
                }
            }
        },
        "middleware.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "a description of the error"
                }
            }
        },
        "types.Address": {
            "type": "object",
            "required": [
                "city",
                "country",
                "line1",
                "postalCode",
                "state"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "globalCode": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "line1": {
                    "type": "string"
                },
                "line2": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "types.Company": {
            "type": "object",
            "required": [
                "addressId",
                "name"
            ],
            "properties": {
                "address": {
                    "description": "Relations",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Address"
                        }
                    ]
                },
                "addressId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "types.FindResult": {
            "type": "object",
            "properties": {
                "data": {},
                "total": {
                    "type": "integer"
                }
            }
        },
        "types.Location": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/types.Address"
                },
                "addressId": {
                    "type": "integer"
                },
                "company": {
                    "description": "Relations (for API responses)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Company"
                        }
                    ]
                },
                "companyId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "types.Role": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "RoleUnknown",
                "RoleAdmin",
                "RoleUser"
            ]
        },
        "types.User": {
            "type": "object",
            "required": [
                "addressId",
                "companyId",
                "email",
                "firstName",
                "lastName"
            ],
            "properties": {
                "addressId": {
                    "type": "integer"
                },
                "companyId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Role"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "users.CreateUserPayload": {
            "type": "object",
            "required": [
                "address_id",
                "company_id",
                "confirm_password",
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "address_id": {
                    "type": "integer",
                    "example": 1
                },
                "company_id": {
                    "type": "integer",
                    "example": 1
                },
                "confirm_password": {
                    "type": "string",
                    "example": "password123"
                },
                "email": {
                    "type": "string",
                    "example": "test@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                }
            }
        },
        "users.UpdateUserPayload": {
            "type": "object",
            "required": [
                "address_id",
                "first_name",
                "last_name"
            ],
            "properties": {
                "address_id": {
                    "type": "integer",
                    "example": 2
                },
                "first_name": {
                    "type": "string",
                    "example": "Jane"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                }
            }
        }
    }
}