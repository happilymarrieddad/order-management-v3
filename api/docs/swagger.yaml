definitions:
  addresses.UpdateAddressPayload:
    properties:
      city:
        example: Newville
        type: string
      line_1:
        example: 456 Market St
        type: string
      line_2:
        example: Suite 200
        type: string
      postal_code:
        example: "54321"
        type: string
      state:
        example: NY
        type: string
    required:
    - city
    - line_1
    - postal_code
    - state
    type: object
  auth.LoginPayload:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  commodities.CreateCommodityPayload:
    properties:
      commodity_type:
        allOf:
        - $ref: '#/definitions/types.CommodityType'
        example: 1
      name:
        example: Apple
        type: string
    required:
    - commodity_type
    - name
    type: object
  commodities.UpdateCommodityPayload:
    properties:
      commodity_type:
        allOf:
        - $ref: '#/definitions/types.CommodityType'
        example: 1
      name:
        example: Orange
        type: string
    required:
    - commodity_type
    - name
    type: object
  commodityattributes.CreateCommodityAttributePayload:
    properties:
      commodityType:
        allOf:
        - $ref: '#/definitions/types.CommodityType'
        enum:
        - 1
      name:
        maxLength: 255
        minLength: 2
        type: string
    required:
    - commodityType
    - name
    type: object
  commodityattributes.UpdateCommodityAttributePayload:
    properties:
      commodityType:
        allOf:
        - $ref: '#/definitions/types.CommodityType'
        enum:
        - 1
      name:
        maxLength: 255
        minLength: 2
        type: string
    required:
    - commodityType
    - name
    type: object
  companies.CreateCompanyPayload:
    properties:
      address_id:
        example: 1
        type: integer
      name:
        example: Awesome Inc.
        type: string
    required:
    - address_id
    - name
    type: object
  companies.UpdateCompanyPayload:
    properties:
      address_id:
        example: 2
        type: integer
      name:
        example: Even Better Inc.
        type: string
    required:
    - address_id
    - name
    type: object
  locations.CreateLocationPayload:
    properties:
      address_id:
        example: 1
        type: integer
      company_id:
        example: 1
        type: integer
      name:
        example: Main Warehouse
        type: string
    required:
    - address_id
    - company_id
    - name
    type: object
  locations.UpdateLocationPayload:
    properties:
      address_id:
        example: 2
        type: integer
      name:
        example: Downtown Office
        type: string
    required:
    - address_id
    - name
    type: object
  middleware.ErrorResponse:
    properties:
      error:
        example: a description of the error
        type: string
    type: object
  repos.AddressFindOpts:
    properties:
      ids:
        items:
          format: int64
          type: integer
        type: array
      limit:
        type: integer
      offset:
        type: integer
    type: object
  repos.CommodityAttributeFindOpts:
    properties:
      commodityTypes:
        description: For IN query
        items:
          $ref: '#/definitions/types.CommodityType'
        type: array
      ids:
        items:
          format: int64
          type: integer
        type: array
      limit:
        type: integer
      offset:
        type: integer
    type: object
  repos.CompanyFindOpts:
    properties:
      limit:
        type: integer
      offset:
        type: integer
    type: object
  repos.FindCommoditiesOpts:
    properties:
      commodityType:
        $ref: '#/definitions/types.CommodityType'
      ids:
        items:
          format: int64
          type: integer
        type: array
      limit:
        type: integer
      name:
        type: string
      offset:
        type: integer
    type: object
  repos.LocationFindOpts:
    properties:
      addressIDs:
        items:
          format: int64
          type: integer
        type: array
      companyIDs:
        items:
          format: int64
          type: integer
        type: array
      ids:
        items:
          format: int64
          type: integer
        type: array
      limit:
        type: integer
      names:
        items:
          type: string
        type: array
      offset:
        type: integer
    type: object
  repos.UserFindOpts:
    properties:
      emails:
        items:
          type: string
        type: array
      ids:
        items:
          format: int64
          type: integer
        type: array
      limit:
        type: integer
      offset:
        type: integer
    type: object
  types.Address:
    properties:
      city:
        type: string
      country:
        type: string
      createdAt:
        type: string
      globalCode:
        type: string
      id:
        type: integer
      line1:
        type: string
      line2:
        type: string
      postalCode:
        type: string
      state:
        type: string
      updatedAt:
        type: string
    required:
    - city
    - country
    - line1
    - postalCode
    - state
    type: object
  types.Commodity:
    properties:
      commodityType:
        $ref: '#/definitions/types.CommodityType'
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
      visible:
        type: boolean
    type: object
  types.CommodityAttribute:
    properties:
      commodityType:
        $ref: '#/definitions/types.CommodityType'
      createdAt:
        type: string
      id:
        type: integer
      name:
        description: Assuming attribute names are unique
        type: string
      updatedAt:
        type: string
    type: object
  types.CommodityType:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - CommodityTypeUnknown
    - CommodityTypeProduce
  types.Company:
    properties:
      address:
        allOf:
        - $ref: '#/definitions/types.Address'
        description: Relations
      address_id:
        type: integer
      created_at:
        type: string
      default_order_number:
        type: integer
      id:
        type: integer
      name:
        type: string
      order_postfix:
        type: string
      order_prefix:
        type: string
      updated_at:
        type: string
    required:
    - address_id
    - name
    type: object
  types.FindResult:
    properties:
      data: {}
      total:
        type: integer
    type: object
  types.Location:
    properties:
      address:
        $ref: '#/definitions/types.Address'
      addressId:
        type: integer
      company:
        allOf:
        - $ref: '#/definitions/types.Company'
        description: Relations (for API responses)
      companyId:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  types.Role:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - RoleUnknown
    - RoleAdmin
    - RoleUser
  types.User:
    properties:
      address:
        allOf:
        - $ref: '#/definitions/types.Address'
        description: Relations
      addressId:
        type: integer
      companyId:
        type: integer
      createdAt:
        type: string
      email:
        type: string
      firstName:
        maxLength: 50
        minLength: 2
        type: string
      id:
        type: integer
      lastName:
        maxLength: 50
        minLength: 2
        type: string
      roles:
        items:
          $ref: '#/definitions/types.Role'
        type: array
      updatedAt:
        type: string
    required:
    - addressId
    - companyId
    - email
    - firstName
    - lastName
    type: object
  users.CreateUserPayload:
    properties:
      address_id:
        example: 1
        type: integer
      company_id:
        example: 1
        type: integer
      confirm_password:
        example: password123
        type: string
      email:
        example: test@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - address_id
    - company_id
    - confirm_password
    - email
    - first_name
    - last_name
    - password
    type: object
  users.UpdateUserPayload:
    properties:
      address_id:
        example: 2
        type: integer
      first_name:
        example: Jane
        type: string
      last_name:
        example: Doe
        type: string
    required:
    - address_id
    - first_name
    - last_name
    type: object
info:
  contact: {}
paths:
  /addresses/{id}:
    get:
      description: Retrieves the details of a single address by its unique ID.
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved address
          schema:
            $ref: '#/definitions/types.Address'
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Address not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an address by ID
      tags:
      - addresses
    put:
      consumes:
      - application/json
      description: Updates an existing address with new details.
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      - description: Address Update Payload
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/addresses.UpdateAddressPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated address
          schema:
            $ref: '#/definitions/types.Address'
        "400":
          description: Bad Request - Invalid input or ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Address not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an address
      tags:
      - addresses
  /addresses/find:
    post:
      consumes:
      - application/json
      description: Finds addresses with optional filters and pagination by sending
        a JSON body.
      parameters:
      - description: Find options
        in: body
        name: opts
        required: true
        schema:
          $ref: '#/definitions/repos.AddressFindOpts'
      produces:
      - application/json
      responses:
        "200":
          description: A list of addresses
          schema:
            allOf:
            - $ref: '#/definitions/types.FindResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/types.Address'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Find addresses
      tags:
      - addresses
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token.
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: User Login
      tags:
      - auth
  /commodities:
    post:
      consumes:
      - application/json
      description: Creates a new commodity.
      parameters:
      - description: Commodity Creation Payload
        in: body
        name: commodity
        required: true
        schema:
          $ref: '#/definitions/commodities.CreateCommodityPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created commodity
          schema:
            $ref: '#/definitions/types.Commodity'
        "400":
          description: Bad Request - Invalid input or validation failed
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Create a new commodity
      tags:
      - commodities
  /commodities/{id}:
    get:
      description: Retrieves the details of a single commodity.
      parameters:
      - description: Commodity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved commodity
          schema:
            $ref: '#/definitions/types.Commodity'
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Commodity not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Get a commodity by ID
      tags:
      - commodities
    put:
      consumes:
      - application/json
      description: Updates an existing commodity by ID.
      parameters:
      - description: Commodity ID
        in: path
        name: id
        required: true
        type: integer
      - description: Commodity Update Payload
        in: body
        name: commodity
        required: true
        schema:
          $ref: '#/definitions/commodities.UpdateCommodityPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated commodity
          schema:
            $ref: '#/definitions/types.Commodity'
        "400":
          description: Bad Request - Invalid input or validation failed
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Commodity not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Update a commodity
      tags:
      - commodities
  /commodities/find:
    post:
      consumes:
      - application/json
      description: Finds commodities with optional filters and pagination by sending
        a JSON body.
      parameters:
      - description: Find options
        in: body
        name: opts
        required: true
        schema:
          $ref: '#/definitions/repos.FindCommoditiesOpts'
      produces:
      - application/json
      responses:
        "200":
          description: A list of commodities
          schema:
            allOf:
            - $ref: '#/definitions/types.FindResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/types.Commodity'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Find commodities
      tags:
      - commodities
  /commodity-attributes:
    post:
      consumes:
      - application/json
      description: Creates a new commodity attribute with the provided details.
      parameters:
      - description: Commodity Attribute Creation Payload
        in: body
        name: attribute
        required: true
        schema:
          $ref: '#/definitions/commodityattributes.CreateCommodityAttributePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created commodity attribute
          schema:
            $ref: '#/definitions/types.CommodityAttribute'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict - Duplicate attribute name
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create a new commodity attribute
      tags:
      - commodity-attributes
  /commodity-attributes/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a single commodity attribute by its ID.
      parameters:
      - description: Commodity Attribute ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved commodity attribute
          schema:
            $ref: '#/definitions/types.CommodityAttribute'
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Commodity attribute not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get a commodity attribute by ID
      tags:
      - commodity-attributes
    put:
      consumes:
      - application/json
      description: Updates an existing commodity attribute with the provided details.
      parameters:
      - description: Commodity Attribute ID
        in: path
        name: id
        required: true
        type: integer
      - description: Commodity Attribute Update Payload
        in: body
        name: attribute
        required: true
        schema:
          $ref: '#/definitions/commodityattributes.UpdateCommodityAttributePayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated commodity attribute
          schema:
            $ref: '#/definitions/types.CommodityAttribute'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Commodity attribute not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict - Duplicate attribute name
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Update a commodity attribute
      tags:
      - commodity-attributes
  /commodity-attributes/find:
    post:
      consumes:
      - application/json
      description: Finds commodity attributes with optional filters and pagination
        by sending a JSON body.
      parameters:
      - description: Find options
        in: body
        name: opts
        required: true
        schema:
          $ref: '#/definitions/repos.CommodityAttributeFindOpts'
      produces:
      - application/json
      responses:
        "200":
          description: A list of commodity attributes
          schema:
            allOf:
            - $ref: '#/definitions/types.FindResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/types.CommodityAttribute'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Find commodity attributes
      tags:
      - commodity-attributes
  /commodity-types:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all available commodity types.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved commodity types
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get all commodity types
      tags:
      - public
  /companies:
    post:
      consumes:
      - application/json
      description: Creates a new company with the provided details.
      parameters:
      - description: Company Creation Payload
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/companies.CreateCompanyPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created company
          schema:
            $ref: '#/definitions/types.Company'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create a new company
      tags:
      - companies
  /companies/{id}:
    delete:
      description: Deletes a company by its ID.
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a company
      tags:
      - companies
    get:
      description: Retrieves the details of a single company by its unique ID.
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved company
          schema:
            $ref: '#/definitions/types.Company'
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Company not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a company by ID
      tags:
      - companies
    put:
      consumes:
      - application/json
      description: Updates an existing company with new details.
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: integer
      - description: Company Update Payload
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/companies.UpdateCompanyPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated company
          schema:
            $ref: '#/definitions/types.Company'
        "400":
          description: Bad Request - Invalid input or ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Company not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a company
      tags:
      - companies
  /companies/find:
    post:
      consumes:
      - application/json
      description: Finds companies with optional filters and pagination by sending
        a JSON body.
      parameters:
      - description: Find options
        in: body
        name: opts
        required: true
        schema:
          $ref: '#/definitions/repos.CompanyFindOpts'
      produces:
      - application/json
      responses:
        "200":
          description: A list of companies
          schema:
            allOf:
            - $ref: '#/definitions/types.FindResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/types.Company'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Find companies
      tags:
      - companies
  /locations:
    post:
      consumes:
      - application/json
      description: Creates a new location for a company. The location name must be
        unique per company.
      parameters:
      - description: Location Creation Payload
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/locations.CreateLocationPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created location
          schema:
            $ref: '#/definitions/types.Location'
        "400":
          description: Bad Request - Invalid input, duplicate name, or dependency
            not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Create a new location
      tags:
      - locations
  /locations/{id}:
    delete:
      description: Deletes a location by its ID.
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a location
      tags:
      - locations
    get:
      description: Retrieves the details of a single location, including its company
        and address.
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved location
          schema:
            $ref: '#/definitions/types.Location'
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Location not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Get a location by ID
      tags:
      - locations
    put:
      consumes:
      - application/json
      description: Updates an existing location's name and/or address.
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      - description: Location Update Payload
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/locations.UpdateLocationPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated location
          schema:
            $ref: '#/definitions/types.Location'
        "400":
          description: Bad Request - Invalid input or ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - Location or new address not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Update a location
      tags:
      - locations
  /locations/find:
    post:
      consumes:
      - application/json
      description: Finds locations with optional filters and pagination by sending
        a JSON body.
      parameters:
      - description: Find options
        in: body
        name: opts
        required: true
        schema:
          $ref: '#/definitions/repos.LocationFindOpts'
      produces:
      - application/json
      responses:
        "200":
          description: A list of locations
          schema:
            allOf:
            - $ref: '#/definitions/types.FindResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/types.Location'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Find locations
      tags:
      - locations
  /order-statuses:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all available order statuses.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved order statuses
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get all order statuses
      tags:
      - public
  /roles:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all available user roles.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved roles
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get all roles
      tags:
      - public
  /users:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided details.
      parameters:
      - description: User Creation Payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.CreateUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request - Invalid input or user already exists
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Deletes a user by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      description: Retrieves the details of a single user by their unique ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request - Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates an existing user's details. This does not update the password.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Update Payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.UpdateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request - Invalid input or ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
  /users/find:
    post:
      consumes:
      - application/json
      description: Finds users with optional filters and pagination by sending a JSON
        body.
      parameters:
      - description: Find options
        in: body
        name: opts
        required: true
        schema:
          $ref: '#/definitions/repos.UserFindOpts'
      produces:
      - application/json
      responses:
        "200":
          description: A list of users
          schema:
            allOf:
            - $ref: '#/definitions/types.FindResult'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/types.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - AppTokenAuth: []
      summary: Find users
      tags:
      - users
swagger: "2.0"
